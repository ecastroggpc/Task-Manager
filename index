<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager - Netlify + Google Sheets</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        h1 {
            color: #333;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #666;
            margin-bottom: 30px;
        }
        
        .login-section {
            text-align: center;
            padding: 40px 0;
        }
        
        .google-btn {
            background: white;
            border: 2px solid #4285f4;
            color: #4285f4;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s;
        }
        
        .google-btn:hover {
            background: #4285f4;
            color: white;
        }
        
        .user-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .user-details {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
        
        .logout-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .logout-btn:hover {
            background: #c82333;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        input[type="text"] {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
        }
        
        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .add-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .add-btn:hover {
            background: #5568d3;
        }
        
        .task-list {
            list-style: none;
        }
        
        .task-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: transform 0.2s;
        }
        
        .task-item:hover {
            transform: translateX(5px);
        }
        
        .task-text {
            flex: 1;
        }
        
        .task-actions {
            display: flex;
            gap: 10px;
        }
        
        .delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .delete-btn:hover {
            background: #c82333;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #999;
        }
        
        .config-note {
            background: #fff3cd;
            border: 1px solid #ffc107;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .config-note h3 {
            color: #856404;
            margin-bottom: 10px;
        }
        
        .config-note code {
            background: #fff;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>üìù Task Manager</h1>
            <p class="subtitle">Your tasks saved in your own Google Spreadsheet</p>
            
            <div class="config-note">
                <h3>‚öôÔ∏è Setup Required:</h3>
                <p>1. Replace <code>YOUR_CLIENT_ID</code> with your Google OAuth Client ID</p>
                <p>2. Replace <code>YOUR_APPS_SCRIPT_URL</code> with your deployed Apps Script web app URL</p>
            </div>
            
            <div id="loginSection" class="login-section">
                <button class="google-btn" onclick="handleLogin()">
                    <svg width="20" height="20" viewBox="0 0 24 24">
                        <path fill="#4285f4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="#34a853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="#fbbc05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="#ea4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    Sign in with Google
                </button>
            </div>
            
            <div id="appSection" style="display: none;">
                <div class="user-info">
                    <div class="user-details">
                        <img id="userAvatar" class="user-avatar" src="" alt="User">
                        <div>
                            <strong id="userName"></strong><br>
                            <small id="userEmail" style="color: #666;"></small>
                        </div>
                    </div>
                    <button class="logout-btn" onclick="handleLogout()">Logout</button>
                </div>
                
                <div id="error" class="error" style="display: none;"></div>
                
                <div class="input-group">
                    <input type="text" id="taskInput" placeholder="Enter a new task..." onkeypress="handleKeyPress(event)">
                    <button class="add-btn" onclick="addTask()">Add Task</button>
                </div>
                
                <div id="loading" class="loading" style="display: none;">Loading tasks...</div>
                
                <ul id="taskList" class="task-list"></ul>
                
                <div id="emptyState" class="empty-state" style="display: none;">
                    No tasks yet. Add one to get started! üöÄ
                </div>
            </div>
        </div>
    </div>

    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
        // ‚ö†Ô∏è REPLACE THESE WITH YOUR ACTUAL VALUES
        const CLIENT_ID = '955025998187-ud1ir1rmdhvmi8cft9hhat3nonvkueh5.apps.googleusercontent.com';
        const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzICA7b0dskNfUWl1xSGbbBJviRfLgwmFVy13f3pI9LeW7N2a-2g_ynJplA6Aoy0vhcxA/exec';
        
        let accessToken = null;
        let userInfo = null;

        // Initialize Google Sign-In
        function initializeGoogleSignIn() {
            google.accounts.id.initialize({
                client_id: CLIENT_ID,
                callback: handleCredentialResponse
            });
        }

        // Handle login button click
        function handleLogin() {
            google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: 'https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email',
                callback: (response) => {
                    if (response.access_token) {
                        accessToken = response.access_token;
                        loadUserInfo();
                    }
                },
            }).requestAccessToken();
        }

        // Load user information
        async function loadUserInfo() {
            try {
                const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                userInfo = await response.json();
                
                document.getElementById('userName').textContent = userInfo.name;
                document.getElementById('userEmail').textContent = userInfo.email;
                document.getElementById('userAvatar').src = userInfo.picture;
                
                document.getElementById('loginSection').style.display = 'none';
                document.getElementById('appSection').style.display = 'block';
                
                loadTasks();
            } catch (error) {
                showError('Failed to load user information');
                console.error(error);
            }
        }

        // Load tasks from Google Apps Script
        async function loadTasks() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('taskList').innerHTML = '';
            
            try {
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getTasks`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                const data = await response.json();
                
                document.getElementById('loading').style.display = 'none';
                
                if (data.tasks && data.tasks.length > 0) {
                    displayTasks(data.tasks);
                    document.getElementById('emptyState').style.display = 'none';
                } else {
                    document.getElementById('emptyState').style.display = 'block';
                }
            } catch (error) {
                document.getElementById('loading').style.display = 'none';
                showError('Failed to load tasks');
                console.error(error);
            }
        }

        // Display tasks
        function displayTasks(tasks) {
            const taskList = document.getElementById('taskList');
            taskList.innerHTML = '';
            
            tasks.forEach(task => {
                const li = document.createElement('li');
                li.className = 'task-item';
                li.innerHTML = `
                    <span class="task-text">${escapeHtml(task.text)}</span>
                    <div class="task-actions">
                        <button class="delete-btn" onclick="deleteTask(${task.id})">Delete</button>
                    </div>
                `;
                taskList.appendChild(li);
            });
        }

        // Add new task
        async function addTask() {
            const input = document.getElementById('taskInput');
            const taskText = input.value.trim();
            
            if (!taskText) {
                showError('Please enter a task');
                return;
            }
            
            try {
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'addTask',
                        task: taskText
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    input.value = '';
                    loadTasks();
                } else {
                    showError('Failed to add task');
                }
            } catch (error) {
                showError('Failed to add task');
                console.error(error);
            }
        }

        // Delete task
        async function deleteTask(taskId) {
            try {
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'deleteTask',
                        taskId: taskId
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    loadTasks();
                } else {
                    showError('Failed to delete task');
                }
            } catch (error) {
                showError('Failed to delete task');
                console.error(error);
            }
        }

        // Handle Enter key press
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                addTask();
            }
        }

        // Handle logout
        function handleLogout() {
            accessToken = null;
            userInfo = null;
            document.getElementById('loginSection').style.display = 'block';
            document.getElementById('appSection').style.display = 'none';
            google.accounts.id.disableAutoSelect();
        }

        // Show error message
        function showError(message) {
            const errorDiv = document.getElementById('error');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Handle credential response (for auto sign-in)
        function handleCredentialResponse(response) {
            // This is for ID token, we need access token for API calls
            console.log('Signed in');
        }

        // Initialize on page load
        window.onload = function() {
            initializeGoogleSignIn();
        };
    </script>
</body>
</html>
